package io.github.notsyncing.lightfur.entity.dsl

import io.github.notsyncing.lightfur.entity.EntityFieldInfo
import io.github.notsyncing.lightfur.entity.EntityModel
import io.github.notsyncing.lightfur.sql.base.ExpressionBuilder
import io.github.notsyncing.lightfur.sql.base.SQLPart
import io.github.notsyncing.lightfur.sql.builders.UpdateQueryBuilder

class EntityUpdateDSL<F: EntityModel>(val updateModel: F) : EntityBaseDSL<F>(updateModel) {
    override val builder = UpdateQueryBuilder()

    init {
        builder.on(getTableModelFromEntityModel(updateModel))

        updateModel.changedDataMap.map { it }
                .sortedBy { it.key.name }
                .forEach {
                    val f = updateModel.fieldInfo[it.key]!!

                    if (f.dbAutoGenerated) {
                        return@forEach
                    }

                    val c = getColumnModelFromEntityFieldInfo(f)
                    builder.set(c, it.value)
                }
    }

    fun set(f: EntityFieldInfo, source: EntityFieldInfo): EntityUpdateDSL<F> {
        builder.set(getColumnModelFromEntityFieldInfo(f), getColumnModelFromEntityFieldInfo(source))
        return this
    }

    fun set(f: EntityFieldInfo, expr: SQLPart): EntityUpdateDSL<F> {
        builder.set(getColumnModelFromEntityFieldInfo(f), expr)
        return this
    }

    fun from(model: EntityModel): EntityUpdateDSL<F> {
        builder.from(getTableModelFromEntityModel(model))
        return this
    }

    fun where(conditions: () -> ExpressionBuilder): EntityUpdateDSL<F> {
        builder.where(conditions())

        return this
    }
}